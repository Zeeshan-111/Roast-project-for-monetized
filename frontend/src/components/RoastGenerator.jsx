import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { RadioGroup, RadioGroupItem } from './ui/radio-group';
import { Label } from './ui/label';
import { Share2, Copy, Loader2, Shuffle, MessageSquare, Twitter, Clock } from 'lucide-react';
import { useToast } from '../hooks/use-toast';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const RoastGenerator = () => {
  const [name, setName] = useState('');
  const [category, setCategory] = useState('medium');
  const [currentRoast, setCurrentRoast] = useState('');
  const [roastHistory, setRoastHistory] = useState([]);
  const [dailyCount, setDailyCount] = useState(0);
  const [randomNames, setRandomNames] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  // Load data from localStorage on component mount
  useEffect(() => {
    loadRoastHistory();
    loadDailyCount();
    fetchRandomNames();
  }, []);

  const loadRoastHistory = () => {
    try {
      const saved = localStorage.getItem('roastHistory');
      if (saved) {
        setRoastHistory(JSON.parse(saved));
      }
    } catch (error) {
      console.error('Error loading roast history:', error);
    }
  };

  const loadDailyCount = () => {
    try {
      const today = new Date().toDateString();
      const savedCount = localStorage.getItem(`dailyRoastCount_${today}`);
      if (savedCount) {
        setDailyCount(parseInt(savedCount, 10));
      }
    } catch (error) {
      console.error('Error loading daily count:', error);
    }
  };

  const updateDailyCount = () => {
    try {
      const today = new Date().toDateString();
      const newCount = dailyCount + 1;
      localStorage.setItem(`dailyRoastCount_${today}`, newCount.toString());
      setDailyCount(newCount);
    } catch (error) {
      console.error('Error updating daily count:', error);
    }
  };

  const saveToHistory = (roastData) => {
    try {
      const newHistory = [roastData, ...roastHistory.slice(0, 4)]; // Keep only last 5
      localStorage.setItem('roastHistory', JSON.stringify(newHistory));
      setRoastHistory(newHistory);
    } catch (error) {
      console.error('Error saving to history:', error);
    }
  };

  const fetchRandomNames = async () => {
    try {
      const response = await axios.get(`${API}/random-names`);
      setRandomNames(response.data.names);
    } catch (error) {
      console.error('Error fetching random names:', error);
    }
  };

  const handleGenerateRoast = async () => {
    if (!name.trim()) {
      toast({
        title: "Hold up! 🛑",
        description: "I need a name to roast! Don't be shy!",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    setCurrentRoast('');

    try {
      const response = await axios.post(`${API}/generate-roast`, {
        name: name.trim(),
        category: category
      });

      const roastData = {
        ...response.data,
        timestamp: new Date().toISOString()
      };

      setCurrentRoast(roastData.roast);
      saveToHistory(roastData);
      updateDailyCount();

      toast({
        title: "Roast served! 🔥",
        description: "Hope you can handle the heat!",
      });

    } catch (error) {
      console.error('Error generating roast:', error);
      toast({
        title: "Oops! 😅",
        description: "Something went wrong. Even I can't roast that badly!",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSurpriseMe = () => {
    if (randomNames.length > 0) {
      const randomName = randomNames[Math.floor(Math.random() * randomNames.length)];
      setName(randomName);
      toast({
        title: "Surprise! 🎲",
        description: `Let's roast ${randomName}!`,
      });
    }
  };

  const handleShare = async (platform = 'generic') => {
    if (!currentRoast) {
      toast({
        title: "Nothing to share! 🤷‍♂️",
        description: "Generate a roast first!",
        variant: "destructive",
      });
      return;
    }

    const shareText = `${currentRoast}\n\nGenerated by AI Roast Generator 🔥`;
    
    try {
      if (platform === 'whatsapp') {
        window.open(`https://wa.me/?text=${encodeURIComponent(shareText)}`, '_blank');
        toast({
          title: "Opening WhatsApp! 📱",
          description: "Share the burn with your friends!",
        });
      } else if (platform === 'twitter') {
        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}`, '_blank');
        toast({
          title: "Opening Twitter! 🐦",
          description: "Tweet that roast!",
        });
      } else if (navigator.share && navigator.canShare && navigator.canShare({text: shareText})) {
        await navigator.share({
          title: 'AI Roast Generator 🔥',
          text: shareText,
          url: window.location.href,
        });
        toast({
          title: "Shared! 🚀",
          description: "Hope they can handle the heat!",
        });
      } else {
        await navigator.clipboard.writeText(shareText);
        toast({
          title: "Copied! 📋",
          description: "Roast copied to clipboard - now go spread the heat!",
        });
      }
    } catch (error) {
      toast({
        title: "Sharing failed! 😔",
        description: "Couldn't share. Try copying manually.",
        variant: "destructive",
      });
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !isGenerating) {
      handleGenerateRoast();
    }
  };

  const getCategoryColor = (cat) => {
    switch (cat) {
      case 'light': return 'bg-green-100 text-green-800';
      case 'extra_spicy': return 'bg-red-100 text-red-800';
      default: return 'bg-orange-100 text-orange-800';
    }
  };

  const getCategoryEmoji = (cat) => {
    switch (cat) {
      case 'light': return '😊';
      case 'extra_spicy': return '🌶️';
      default: return '🔥';
    }
  };

  const formatTimestamp = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="min-h-screen w-full flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-orange-400 via-red-400 to-pink-400 opacity-90">
        <div className="absolute inset-0 bg-gradient-to-tl from-yellow-300 via-green-300 to-cyan-300 opacity-70 animate-pulse"></div>
      </div>
      
      {/* Floating Background Elements */}
      <div className="absolute top-10 left-10 w-20 h-20 bg-yellow-300 rounded-full opacity-20 animate-bounce"></div>
      <div className="absolute bottom-20 right-16 w-16 h-16 bg-cyan-300 rounded-full opacity-30 animate-bounce" style={{animationDelay: '1s'}}></div>
      <div className="absolute top-1/3 right-1/4 w-12 h-12 bg-green-300 rounded-full opacity-25 animate-bounce" style={{animationDelay: '0.5s'}}></div>

      {/* Daily Counter Badge */}
      <div className="fixed top-4 right-4 z-20">
        <Badge className="bg-orange-500 text-white text-sm font-bold px-3 py-1 shadow-lg">
          🔥 {dailyCount} Roasts Today
        </Badge>
      </div>

      {/* Main Content */}
      <Card className="w-full max-w-md mx-auto bg-white/95 backdrop-blur-sm shadow-2xl border-0 relative z-10 transform transition-all duration-300 hover:scale-105 mb-6">
        <CardHeader className="text-center pb-4">
          <CardTitle className="text-3xl font-bold bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent">
            AI Roast Generator 🔥
          </CardTitle>
          <p className="text-gray-600 font-medium">
            Ready to get roasted? Enter your name if you dare!
          </p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Name Input with Surprise Button */}
          <div className="flex gap-2">
            <Input
              type="text"
              placeholder="Enter your name..."
              value={name}
              onChange={(e) => setName(e.target.value)}
              onKeyPress={handleKeyPress}
              className="text-lg h-12 bg-gray-50 border-2 border-gray-200 focus:border-orange-400 focus:bg-white transition-all duration-200 flex-1"
              disabled={isGenerating}
            />
            <Button
              onClick={handleSurpriseMe}
              variant="outline"
              size="icon"
              className="h-12 w-12 border-2 border-orange-300 text-orange-600 hover:bg-orange-50 hover:border-orange-400"
              disabled={isGenerating}
              title="Surprise Me!"
            >
              <Shuffle className="h-4 w-4" />
            </Button>
          </div>

          {/* Roast Category Selection */}
          <div className="space-y-3">
            <Label className="text-sm font-semibold text-gray-700">Choose Your Roast Level:</Label>
            <RadioGroup value={category} onValueChange={setCategory} className="flex justify-between">
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="light" id="light" disabled={isGenerating} />
                <Label htmlFor="light" className="text-sm cursor-pointer">😊 Light</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="medium" id="medium" disabled={isGenerating} />
                <Label htmlFor="medium" className="text-sm cursor-pointer">🔥 Medium</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="extra_spicy" id="extra_spicy" disabled={isGenerating} />
                <Label htmlFor="extra_spicy" className="text-sm cursor-pointer">🌶️ Extra Spicy</Label>
              </div>
            </RadioGroup>
          </div>

          {/* Generate Button */}
          <Button
            onClick={handleGenerateRoast}
            disabled={isGenerating}
            className="w-full h-12 text-lg font-bold bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 transform transition-all duration-200 hover:scale-105 active:scale-95 shadow-lg"
          >
            {isGenerating ? (
              <>
                <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                Generating Roast...
              </>
            ) : (
              'Roast Me! 🔥'
            )}
          </Button>

          {/* Loading Message */}
          {isGenerating && (
            <div className="text-center text-orange-600 font-medium animate-pulse">
              AI is crafting your roast... This is gonna be good! 😈
            </div>
          )}

          {/* Current Roast Output */}
          {currentRoast && !isGenerating && (
            <div className="space-y-4 animate-fade-in">
              <div className="bg-gradient-to-r from-yellow-100 to-orange-100 p-4 rounded-lg border-l-4 border-orange-400">
                <p className="text-lg font-medium text-gray-800 leading-relaxed">
                  {currentRoast}
                </p>
              </div>
              
              {/* Social Share Buttons */}
              <div className="flex gap-2">
                <Button
                  onClick={() => handleShare('whatsapp')}
                  size="sm"
                  className="flex-1 bg-green-500 hover:bg-green-600 text-white"
                >
                  <MessageSquare className="mr-1 h-4 w-4" />
                  WhatsApp
                </Button>
                <Button
                  onClick={() => handleShare('twitter')}
                  size="sm"
                  className="flex-1 bg-blue-500 hover:bg-blue-600 text-white"
                >
                  <Twitter className="mr-1 h-4 w-4" />
                  Tweet
                </Button>
                <Button
                  onClick={() => handleShare()}
                  variant="outline"
                  size="sm"
                  className="flex-1 border-2 border-orange-300 text-orange-600 hover:bg-orange-50 hover:border-orange-400"
                >
                  <Share2 className="mr-1 h-4 w-4" />
                  Share
                </Button>
              </div>
            </div>
          )}

          {/* Fun Footer */}
          <div className="text-center text-sm text-gray-500 pt-2">
            <p>Powered by AI 🤖 with a sense of humor</p>
          </div>
        </CardContent>
      </Card>

      {/* Roast History */}
      {roastHistory.length > 0 && (
        <Card className="w-full max-w-md mx-auto bg-white/90 backdrop-blur-sm shadow-lg border-0 relative z-10">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-bold text-gray-800 flex items-center gap-2">
              <Clock className="h-5 w-5" />
              Roast History
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {roastHistory.slice(0, 5).map((roast, index) => (
              <div key={index} className="bg-gray-50 p-3 rounded-lg border-l-2 border-gray-300">
                <div className="flex items-center justify-between mb-1">
                  <span className="font-semibold text-sm text-gray-700">{roast.name}</span>
                  <div className="flex items-center gap-2">
                    <Badge className={`text-xs px-2 py-0.5 ${getCategoryColor(roast.category)}`}>
                      {getCategoryEmoji(roast.category)} {roast.category}
                    </Badge>
                    <span className="text-xs text-gray-500">
                      {formatTimestamp(roast.timestamp)}
                    </span>
                  </div>
                </div>
                <p className="text-sm text-gray-600 leading-relaxed">
                  {roast.roast}
                </p>
              </div>
            ))}
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default RoastGenerator;