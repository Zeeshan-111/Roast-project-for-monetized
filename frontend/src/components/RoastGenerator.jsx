import React, { useState } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Share2, Copy, Loader2 } from 'lucide-react';
import { useToast } from '../hooks/use-toast';
import { generateRandomRoast, simulateAIDelay } from '../mockData';

const RoastGenerator = () => {
  const [name, setName] = useState('');
  const [roast, setRoast] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const handleGenerateRoast = async () => {
    if (!name.trim()) {
      toast({
        title: "Hold up! 🛑",
        description: "I need a name to roast! Don't be shy!",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    setRoast('');

    try {
      const generatedRoast = await simulateAIDelay(() => generateRandomRoast(name));
      setRoast(generatedRoast);
    } catch (error) {
      toast({
        title: "Oops! 😅",
        description: "Something went wrong. Even I can't roast that badly!",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleShare = async () => {
    if (!roast) {
      toast({
        title: "Nothing to share! 🤷‍♂️",
        description: "Generate a roast first!",
        variant: "destructive",
      });
      return;
    }

    const shareData = {
      title: 'AI Roast Generator 🔥',
      text: roast,
      url: window.location.href,
    };

    try {
      if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
        await navigator.share(shareData);
        toast({
          title: "Shared! 🚀",
          description: "Hope they can handle the heat!",
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(`${roast}\n\nGenerated by AI Roast Generator 🔥`);
        toast({
          title: "Copied! 📋",
          description: "Roast copied to clipboard - now go spread the heat!",
        });
      }
    } catch (error) {
      toast({
        title: "Sharing failed! 😔",
        description: "Couldn't share or copy. Try selecting and copying manually.",
        variant: "destructive",
      });
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !isGenerating) {
      handleGenerateRoast();
    }
  };

  return (
    <div className="min-h-screen w-full flex items-center justify-center p-4 relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-orange-400 via-red-400 to-pink-400 opacity-90">
        <div className="absolute inset-0 bg-gradient-to-tl from-yellow-300 via-green-300 to-cyan-300 opacity-70 animate-pulse"></div>
      </div>
      
      {/* Floating Background Elements */}
      <div className="absolute top-10 left-10 w-20 h-20 bg-yellow-300 rounded-full opacity-20 animate-bounce"></div>
      <div className="absolute bottom-20 right-16 w-16 h-16 bg-cyan-300 rounded-full opacity-30 animate-bounce" style={{animationDelay: '1s'}}></div>
      <div className="absolute top-1/3 right-1/4 w-12 h-12 bg-green-300 rounded-full opacity-25 animate-bounce" style={{animationDelay: '0.5s'}}></div>

      {/* Main Content */}
      <Card className="w-full max-w-md mx-auto bg-white/95 backdrop-blur-sm shadow-2xl border-0 relative z-10 transform transition-all duration-300 hover:scale-105">
        <CardHeader className="text-center pb-4">
          <CardTitle className="text-3xl font-bold bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent">
            AI Roast Generator 🔥
          </CardTitle>
          <p className="text-gray-600 font-medium">
            Ready to get roasted? Enter your name if you dare!
          </p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Name Input */}
          <div className="space-y-2">
            <Input
              type="text"
              placeholder="Enter your name..."
              value={name}
              onChange={(e) => setName(e.target.value)}
              onKeyPress={handleKeyPress}
              className="text-lg h-12 bg-gray-50 border-2 border-gray-200 focus:border-orange-400 focus:bg-white transition-all duration-200"
              disabled={isGenerating}
            />
          </div>

          {/* Generate Button */}
          <Button
            onClick={handleGenerateRoast}
            disabled={isGenerating}
            className="w-full h-12 text-lg font-bold bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 transform transition-all duration-200 hover:scale-105 active:scale-95 shadow-lg"
          >
            {isGenerating ? (
              <>
                <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                Generating Roast...
              </>
            ) : (
              'Roast Me! 🔥'
            )}
          </Button>

          {/* Loading Message */}
          {isGenerating && (
            <div className="text-center text-orange-600 font-medium animate-pulse">
              Preparing your roast... This is gonna be good! 😈
            </div>
          )}

          {/* Roast Output */}
          {roast && !isGenerating && (
            <div className="space-y-4 animate-fade-in">
              <div className="bg-gradient-to-r from-yellow-100 to-orange-100 p-4 rounded-lg border-l-4 border-orange-400">
                <p className="text-lg font-medium text-gray-800 leading-relaxed">
                  {roast}
                </p>
              </div>
              
              {/* Share Button */}
              <Button
                onClick={handleShare}
                variant="outline"
                className="w-full h-11 font-semibold border-2 border-orange-300 text-orange-600 hover:bg-orange-50 hover:border-orange-400 transform transition-all duration-200 hover:scale-105"
              >
                <Share2 className="mr-2 h-4 w-4" />
                Share This Roast
              </Button>
            </div>
          )}

          {/* Fun Footer */}
          <div className="text-center text-sm text-gray-500 pt-2">
            <p>Made with 🔥 and a bit of sass</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default RoastGenerator;